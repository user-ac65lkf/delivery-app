// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: login.proto

package login_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Login with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Login) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Login with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoginMultiError, or nil if none found.
func (m *Login) ValidateAll() error {
	return m.validate(true)
}

func (m *Login) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoginMultiError(errors)
	}

	return nil
}

// LoginMultiError is an error wrapping multiple validation errors returned by
// Login.ValidateAll() if the designated constraints aren't met.
type LoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginMultiError) AllErrors() []error { return m }

// LoginValidationError is the validation error returned by Login.Validate if
// the designated constraints aren't met.
type LoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginValidationError) ErrorName() string { return "LoginValidationError" }

// Error satisfies the builtin error interface
func (e LoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginValidationError{}

// Validate checks the field values on GetRefreshToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRefreshToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefreshToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefreshTokenMultiError, or nil if none found.
func (m *GetRefreshToken) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefreshToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRefreshTokenMultiError(errors)
	}

	return nil
}

// GetRefreshTokenMultiError is an error wrapping multiple validation errors
// returned by GetRefreshToken.ValidateAll() if the designated constraints
// aren't met.
type GetRefreshTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefreshTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefreshTokenMultiError) AllErrors() []error { return m }

// GetRefreshTokenValidationError is the validation error returned by
// GetRefreshToken.Validate if the designated constraints aren't met.
type GetRefreshTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefreshTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefreshTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefreshTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefreshTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefreshTokenValidationError) ErrorName() string { return "GetRefreshTokenValidationError" }

// Error satisfies the builtin error interface
func (e GetRefreshTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefreshToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefreshTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefreshTokenValidationError{}

// Validate checks the field values on GetAccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAccessToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAccessTokenMultiError,
// or nil if none found.
func (m *GetAccessToken) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAccessTokenMultiError(errors)
	}

	return nil
}

// GetAccessTokenMultiError is an error wrapping multiple validation errors
// returned by GetAccessToken.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenMultiError) AllErrors() []error { return m }

// GetAccessTokenValidationError is the validation error returned by
// GetAccessToken.Validate if the designated constraints aren't met.
type GetAccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenValidationError) ErrorName() string { return "GetAccessTokenValidationError" }

// Error satisfies the builtin error interface
func (e GetAccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenValidationError{}

// Validate checks the field values on Check with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Check) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Check with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CheckMultiError, or nil if none found.
func (m *Check) ValidateAll() error {
	return m.validate(true)
}

func (m *Check) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckMultiError(errors)
	}

	return nil
}

// CheckMultiError is an error wrapping multiple validation errors returned by
// Check.ValidateAll() if the designated constraints aren't met.
type CheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckMultiError) AllErrors() []error { return m }

// CheckValidationError is the validation error returned by Check.Validate if
// the designated constraints aren't met.
type CheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckValidationError) ErrorName() string { return "CheckValidationError" }

// Error satisfies the builtin error interface
func (e CheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckValidationError{}

// Validate checks the field values on AuthUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthUserMultiError, or nil
// if none found.
func (m *AuthUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetLogin()); err != nil {
		err = AuthUserValidationError{
			field:  "Login",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 4 || l > 40 {
		err := AuthUserValidationError{
			field:  "Password",
			reason: "value length must be between 4 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserMultiError(errors)
	}

	return nil
}

func (m *AuthUser) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AuthUser) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AuthUserMultiError is an error wrapping multiple validation errors returned
// by AuthUser.ValidateAll() if the designated constraints aren't met.
type AuthUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserMultiError) AllErrors() []error { return m }

// AuthUserValidationError is the validation error returned by
// AuthUser.Validate if the designated constraints aren't met.
type AuthUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserValidationError) ErrorName() string { return "AuthUserValidationError" }

// Error satisfies the builtin error interface
func (e AuthUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserValidationError{}

// Validate checks the field values on Login_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Login_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Login_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Login_RequestMultiError, or
// nil if none found.
func (m *Login_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Login_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetLogin()); err != nil {
		err = Login_RequestValidationError{
			field:  "Login",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 4 {
		err := Login_RequestValidationError{
			field:  "Password",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Login_RequestMultiError(errors)
	}

	return nil
}

func (m *Login_Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Login_Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// Login_RequestMultiError is an error wrapping multiple validation errors
// returned by Login_Request.ValidateAll() if the designated constraints
// aren't met.
type Login_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Login_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Login_RequestMultiError) AllErrors() []error { return m }

// Login_RequestValidationError is the validation error returned by
// Login_Request.Validate if the designated constraints aren't met.
type Login_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Login_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Login_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Login_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Login_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Login_RequestValidationError) ErrorName() string { return "Login_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Login_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogin_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Login_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Login_RequestValidationError{}

// Validate checks the field values on Login_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Login_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Login_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Login_ResponseMultiError,
// or nil if none found.
func (m *Login_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Login_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return Login_ResponseMultiError(errors)
	}

	return nil
}

// Login_ResponseMultiError is an error wrapping multiple validation errors
// returned by Login_Response.ValidateAll() if the designated constraints
// aren't met.
type Login_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Login_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Login_ResponseMultiError) AllErrors() []error { return m }

// Login_ResponseValidationError is the validation error returned by
// Login_Response.Validate if the designated constraints aren't met.
type Login_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Login_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Login_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Login_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Login_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Login_ResponseValidationError) ErrorName() string { return "Login_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Login_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogin_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Login_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Login_ResponseValidationError{}

// Validate checks the field values on GetRefreshToken_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRefreshToken_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefreshToken_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefreshToken_RequestMultiError, or nil if none found.
func (m *GetRefreshToken_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefreshToken_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return GetRefreshToken_RequestMultiError(errors)
	}

	return nil
}

// GetRefreshToken_RequestMultiError is an error wrapping multiple validation
// errors returned by GetRefreshToken_Request.ValidateAll() if the designated
// constraints aren't met.
type GetRefreshToken_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefreshToken_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefreshToken_RequestMultiError) AllErrors() []error { return m }

// GetRefreshToken_RequestValidationError is the validation error returned by
// GetRefreshToken_Request.Validate if the designated constraints aren't met.
type GetRefreshToken_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefreshToken_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefreshToken_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefreshToken_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefreshToken_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefreshToken_RequestValidationError) ErrorName() string {
	return "GetRefreshToken_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRefreshToken_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefreshToken_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefreshToken_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefreshToken_RequestValidationError{}

// Validate checks the field values on GetRefreshToken_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRefreshToken_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefreshToken_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefreshToken_ResponseMultiError, or nil if none found.
func (m *GetRefreshToken_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefreshToken_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return GetRefreshToken_ResponseMultiError(errors)
	}

	return nil
}

// GetRefreshToken_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetRefreshToken_Response.ValidateAll() if the designated
// constraints aren't met.
type GetRefreshToken_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefreshToken_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefreshToken_ResponseMultiError) AllErrors() []error { return m }

// GetRefreshToken_ResponseValidationError is the validation error returned by
// GetRefreshToken_Response.Validate if the designated constraints aren't met.
type GetRefreshToken_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefreshToken_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefreshToken_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefreshToken_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefreshToken_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefreshToken_ResponseValidationError) ErrorName() string {
	return "GetRefreshToken_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRefreshToken_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefreshToken_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefreshToken_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefreshToken_ResponseValidationError{}

// Validate checks the field values on GetAccessToken_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessToken_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessToken_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessToken_RequestMultiError, or nil if none found.
func (m *GetAccessToken_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessToken_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return GetAccessToken_RequestMultiError(errors)
	}

	return nil
}

// GetAccessToken_RequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessToken_Request.ValidateAll() if the designated
// constraints aren't met.
type GetAccessToken_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessToken_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessToken_RequestMultiError) AllErrors() []error { return m }

// GetAccessToken_RequestValidationError is the validation error returned by
// GetAccessToken_Request.Validate if the designated constraints aren't met.
type GetAccessToken_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessToken_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessToken_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessToken_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessToken_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessToken_RequestValidationError) ErrorName() string {
	return "GetAccessToken_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessToken_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessToken_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessToken_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessToken_RequestValidationError{}

// Validate checks the field values on GetAccessToken_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessToken_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessToken_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessToken_ResponseMultiError, or nil if none found.
func (m *GetAccessToken_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessToken_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetAccessToken_ResponseMultiError(errors)
	}

	return nil
}

// GetAccessToken_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessToken_Response.ValidateAll() if the designated
// constraints aren't met.
type GetAccessToken_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessToken_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessToken_ResponseMultiError) AllErrors() []error { return m }

// GetAccessToken_ResponseValidationError is the validation error returned by
// GetAccessToken_Response.Validate if the designated constraints aren't met.
type GetAccessToken_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessToken_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessToken_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessToken_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessToken_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessToken_ResponseValidationError) ErrorName() string {
	return "GetAccessToken_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessToken_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessToken_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessToken_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessToken_ResponseValidationError{}

// Validate checks the field values on Check_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Check_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Check_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Check_RequestMultiError, or
// nil if none found.
func (m *Check_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Check_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EndpointAddress

	if len(errors) > 0 {
		return Check_RequestMultiError(errors)
	}

	return nil
}

// Check_RequestMultiError is an error wrapping multiple validation errors
// returned by Check_Request.ValidateAll() if the designated constraints
// aren't met.
type Check_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Check_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Check_RequestMultiError) AllErrors() []error { return m }

// Check_RequestValidationError is the validation error returned by
// Check_Request.Validate if the designated constraints aren't met.
type Check_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Check_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Check_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Check_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Check_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Check_RequestValidationError) ErrorName() string { return "Check_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Check_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheck_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Check_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Check_RequestValidationError{}

// Validate checks the field values on Check_Respond with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Check_Respond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Check_Respond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Check_RespondMultiError, or
// nil if none found.
func (m *Check_Respond) ValidateAll() error {
	return m.validate(true)
}

func (m *Check_Respond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return Check_RespondMultiError(errors)
	}

	return nil
}

// Check_RespondMultiError is an error wrapping multiple validation errors
// returned by Check_Respond.ValidateAll() if the designated constraints
// aren't met.
type Check_RespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Check_RespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Check_RespondMultiError) AllErrors() []error { return m }

// Check_RespondValidationError is the validation error returned by
// Check_Respond.Validate if the designated constraints aren't met.
type Check_RespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Check_RespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Check_RespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Check_RespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Check_RespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Check_RespondValidationError) ErrorName() string { return "Check_RespondValidationError" }

// Error satisfies the builtin error interface
func (e Check_RespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheck_Respond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Check_RespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Check_RespondValidationError{}
