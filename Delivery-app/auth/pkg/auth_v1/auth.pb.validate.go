// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package auth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Update with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Update) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UpdateMultiError, or nil if none found.
func (m *Update) ValidateAll() error {
	return m.validate(true)
}

func (m *Update) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMultiError(errors)
	}

	return nil
}

// UpdateMultiError is an error wrapping multiple validation errors returned by
// Update.ValidateAll() if the designated constraints aren't met.
type UpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMultiError) AllErrors() []error { return m }

// UpdateValidationError is the validation error returned by Update.Validate if
// the designated constraints aren't met.
type UpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateValidationError) ErrorName() string { return "UpdateValidationError" }

// Error satisfies the builtin error interface
func (e UpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateValidationError{}

// Validate checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Delete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeleteMultiError, or nil if none found.
func (m *Delete) ValidateAll() error {
	return m.validate(true)
}

func (m *Delete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMultiError(errors)
	}

	return nil
}

// DeleteMultiError is an error wrapping multiple validation errors returned by
// Delete.ValidateAll() if the designated constraints aren't met.
type DeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMultiError) AllErrors() []error { return m }

// DeleteValidationError is the validation error returned by Delete.Validate if
// the designated constraints aren't met.
type DeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValidationError) ErrorName() string { return "DeleteValidationError" }

// Error satisfies the builtin error interface
func (e DeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValidationError{}

// Validate checks the field values on GetUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetUserMultiError, or nil if none found.
func (m *GetUser) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserMultiError(errors)
	}

	return nil
}

// GetUserMultiError is an error wrapping multiple validation errors returned
// by GetUser.ValidateAll() if the designated constraints aren't met.
type GetUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMultiError) AllErrors() []error { return m }

// GetUserValidationError is the validation error returned by GetUser.Validate
// if the designated constraints aren't met.
type GetUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserValidationError) ErrorName() string { return "GetUserValidationError" }

// Error satisfies the builtin error interface
func (e GetUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserValidationError{}

// Validate checks the field values on GetUsers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUsersMultiError, or nil
// if none found.
func (m *GetUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersMultiError(errors)
	}

	return nil
}

// GetUsersMultiError is an error wrapping multiple validation errors returned
// by GetUsers.ValidateAll() if the designated constraints aren't met.
type GetUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersMultiError) AllErrors() []error { return m }

// GetUsersValidationError is the validation error returned by
// GetUsers.Validate if the designated constraints aren't met.
type GetUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersValidationError) ErrorName() string { return "GetUsersValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersValidationError{}

// Validate checks the field values on GetAllUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllUsersMultiError, or
// nil if none found.
func (m *GetAllUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllUsersMultiError(errors)
	}

	return nil
}

// GetAllUsersMultiError is an error wrapping multiple validation errors
// returned by GetAllUsers.ValidateAll() if the designated constraints aren't met.
type GetAllUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersMultiError) AllErrors() []error { return m }

// GetAllUsersValidationError is the validation error returned by
// GetAllUsers.Validate if the designated constraints aren't met.
type GetAllUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersValidationError) ErrorName() string { return "GetAllUsersValidationError" }

// Error satisfies the builtin error interface
func (e GetAllUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersValidationError{}

// Validate checks the field values on Create with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Create) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Create with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreateMultiError, or nil if none found.
func (m *Create) ValidateAll() error {
	return m.validate(true)
}

func (m *Create) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMultiError(errors)
	}

	return nil
}

// CreateMultiError is an error wrapping multiple validation errors returned by
// Create.ValidateAll() if the designated constraints aren't met.
type CreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultiError) AllErrors() []error { return m }

// CreateValidationError is the validation error returned by Create.Validate if
// the designated constraints aren't met.
type CreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateValidationError) ErrorName() string { return "CreateValidationError" }

// Error satisfies the builtin error interface
func (e CreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateValidationError{}

// Validate checks the field values on AuthUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthUserMultiError, or nil
// if none found.
func (m *AuthUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetLogin()); err != nil {
		err = AuthUserValidationError{
			field:  "Login",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 4 || l > 40 {
		err := AuthUserValidationError{
			field:  "Password",
			reason: "value length must be between 4 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserMultiError(errors)
	}

	return nil
}

func (m *AuthUser) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AuthUser) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AuthUserMultiError is an error wrapping multiple validation errors returned
// by AuthUser.ValidateAll() if the designated constraints aren't met.
type AuthUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserMultiError) AllErrors() []error { return m }

// AuthUserValidationError is the validation error returned by
// AuthUser.Validate if the designated constraints aren't met.
type AuthUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserValidationError) ErrorName() string { return "AuthUserValidationError" }

// Error satisfies the builtin error interface
func (e AuthUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Phone

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetCoordinateAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CoordinateAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CoordinateAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoordinateAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CoordinateAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Coordinate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coordinate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coordinate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoordinateMultiError, or
// nil if none found.
func (m *Coordinate) ValidateAll() error {
	return m.validate(true)
}

func (m *Coordinate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return CoordinateMultiError(errors)
	}

	return nil
}

// CoordinateMultiError is an error wrapping multiple validation errors
// returned by Coordinate.ValidateAll() if the designated constraints aren't met.
type CoordinateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoordinateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoordinateMultiError) AllErrors() []error { return m }

// CoordinateValidationError is the validation error returned by
// Coordinate.Validate if the designated constraints aren't met.
type CoordinateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinateValidationError) ErrorName() string { return "CoordinateValidationError" }

// Error satisfies the builtin error interface
func (e CoordinateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinateValidationError{}

// Validate checks the field values on Update_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Update_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Update_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Update_RequestMultiError,
// or nil if none found.
func (m *Update_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Update_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Update_RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Update_RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Update_RequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Update_RequestMultiError(errors)
	}

	return nil
}

// Update_RequestMultiError is an error wrapping multiple validation errors
// returned by Update_Request.ValidateAll() if the designated constraints
// aren't met.
type Update_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Update_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Update_RequestMultiError) AllErrors() []error { return m }

// Update_RequestValidationError is the validation error returned by
// Update_Request.Validate if the designated constraints aren't met.
type Update_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Update_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Update_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Update_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Update_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Update_RequestValidationError) ErrorName() string { return "Update_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Update_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Update_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Update_RequestValidationError{}

// Validate checks the field values on Delete_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Delete_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Delete_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Delete_RequestMultiError,
// or nil if none found.
func (m *Delete_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Delete_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Delete_RequestMultiError(errors)
	}

	return nil
}

// Delete_RequestMultiError is an error wrapping multiple validation errors
// returned by Delete_Request.ValidateAll() if the designated constraints
// aren't met.
type Delete_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Delete_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Delete_RequestMultiError) AllErrors() []error { return m }

// Delete_RequestValidationError is the validation error returned by
// Delete_Request.Validate if the designated constraints aren't met.
type Delete_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Delete_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Delete_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Delete_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Delete_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Delete_RequestValidationError) ErrorName() string { return "Delete_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Delete_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelete_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Delete_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Delete_RequestValidationError{}

// Validate checks the field values on GetUser_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUser_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUser_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUser_RequestMultiError, or nil if none found.
func (m *GetUser_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUser_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUser_RequestMultiError(errors)
	}

	return nil
}

// GetUser_RequestMultiError is an error wrapping multiple validation errors
// returned by GetUser_Request.ValidateAll() if the designated constraints
// aren't met.
type GetUser_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUser_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUser_RequestMultiError) AllErrors() []error { return m }

// GetUser_RequestValidationError is the validation error returned by
// GetUser_Request.Validate if the designated constraints aren't met.
type GetUser_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUser_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUser_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUser_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUser_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUser_RequestValidationError) ErrorName() string { return "GetUser_RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUser_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUser_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUser_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUser_RequestValidationError{}

// Validate checks the field values on GetUser_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUser_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUser_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUser_ResponseMultiError, or nil if none found.
func (m *GetUser_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUser_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUser_ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUser_ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUser_ResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUser_ResponseMultiError(errors)
	}

	return nil
}

// GetUser_ResponseMultiError is an error wrapping multiple validation errors
// returned by GetUser_Response.ValidateAll() if the designated constraints
// aren't met.
type GetUser_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUser_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUser_ResponseMultiError) AllErrors() []error { return m }

// GetUser_ResponseValidationError is the validation error returned by
// GetUser_Response.Validate if the designated constraints aren't met.
type GetUser_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUser_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUser_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUser_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUser_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUser_ResponseValidationError) ErrorName() string { return "GetUser_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUser_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUser_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUser_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUser_ResponseValidationError{}

// Validate checks the field values on GetUsers_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsers_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsers_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsers_RequestMultiError, or nil if none found.
func (m *GetUsers_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsers_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsers_RequestMultiError(errors)
	}

	return nil
}

// GetUsers_RequestMultiError is an error wrapping multiple validation errors
// returned by GetUsers_Request.ValidateAll() if the designated constraints
// aren't met.
type GetUsers_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsers_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsers_RequestMultiError) AllErrors() []error { return m }

// GetUsers_RequestValidationError is the validation error returned by
// GetUsers_Request.Validate if the designated constraints aren't met.
type GetUsers_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsers_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsers_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsers_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsers_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsers_RequestValidationError) ErrorName() string { return "GetUsers_RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsers_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsers_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsers_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsers_RequestValidationError{}

// Validate checks the field values on GetUsers_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsers_ResponseMultiError, or nil if none found.
func (m *GetUsers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsers_ResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsers_ResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsers_ResponseValidationError{
					field:  fmt.Sprintf("User[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsers_ResponseMultiError(errors)
	}

	return nil
}

// GetUsers_ResponseMultiError is an error wrapping multiple validation errors
// returned by GetUsers_Response.ValidateAll() if the designated constraints
// aren't met.
type GetUsers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsers_ResponseMultiError) AllErrors() []error { return m }

// GetUsers_ResponseValidationError is the validation error returned by
// GetUsers_Response.Validate if the designated constraints aren't met.
type GetUsers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsers_ResponseValidationError) ErrorName() string {
	return "GetUsers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsers_ResponseValidationError{}

// Validate checks the field values on GetAllUsers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsers_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsers_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsers_ResponseMultiError, or nil if none found.
func (m *GetAllUsers_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsers_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsers_ResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsers_ResponseValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsers_ResponseValidationError{
					field:  fmt.Sprintf("User[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUsers_ResponseMultiError(errors)
	}

	return nil
}

// GetAllUsers_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUsers_Response.ValidateAll() if the designated
// constraints aren't met.
type GetAllUsers_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsers_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsers_ResponseMultiError) AllErrors() []error { return m }

// GetAllUsers_ResponseValidationError is the validation error returned by
// GetAllUsers_Response.Validate if the designated constraints aren't met.
type GetAllUsers_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsers_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsers_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsers_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsers_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsers_ResponseValidationError) ErrorName() string {
	return "GetAllUsers_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsers_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsers_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsers_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsers_ResponseValidationError{}

// Validate checks the field values on Create_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Create_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Create_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Create_RequestMultiError,
// or nil if none found.
func (m *Create_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Create_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoginPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Create_RequestValidationError{
					field:  "LoginPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Create_RequestValidationError{
					field:  "LoginPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoginPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Create_RequestValidationError{
				field:  "LoginPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Create_RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Create_RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Create_RequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Create_RequestMultiError(errors)
	}

	return nil
}

// Create_RequestMultiError is an error wrapping multiple validation errors
// returned by Create_Request.ValidateAll() if the designated constraints
// aren't met.
type Create_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Create_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Create_RequestMultiError) AllErrors() []error { return m }

// Create_RequestValidationError is the validation error returned by
// Create_Request.Validate if the designated constraints aren't met.
type Create_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Create_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Create_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Create_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Create_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Create_RequestValidationError) ErrorName() string { return "Create_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Create_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreate_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Create_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Create_RequestValidationError{}

// Validate checks the field values on Create_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Create_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Create_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Create_ResponseMultiError, or nil if none found.
func (m *Create_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Create_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Create_ResponseMultiError(errors)
	}

	return nil
}

// Create_ResponseMultiError is an error wrapping multiple validation errors
// returned by Create_Response.ValidateAll() if the designated constraints
// aren't met.
type Create_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Create_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Create_ResponseMultiError) AllErrors() []error { return m }

// Create_ResponseValidationError is the validation error returned by
// Create_Response.Validate if the designated constraints aren't met.
type Create_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Create_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Create_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Create_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Create_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Create_ResponseValidationError) ErrorName() string { return "Create_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Create_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreate_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Create_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Create_ResponseValidationError{}
